name: GitHub CI

on:
  push:
    paths-ignore:
      - '.github/*'
      - '.github/*TEMPLATE/**'
  pull_request:
    paths-ignore:
      - '*.md'
      - '.github/*'
      - '.github/*TEMPLATE/**'

jobs:
  build:
    name: ${{ matrix.platform }} (${{ matrix.arch }}, ${{ matrix.configuration }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        cmake-generator:
          # x86 arch
          - ${{ '"Visual Studio 16 2019" -A Win32' }}
          # x64 arch
          - ${{ '"Visual Studio 16 2019" -A x64' }}
          - ${{ '"Unix Makefiles"' }}
          - Xcode
        configuration: [Debug, Release]
        include:
          - cmake-generator: ${{ '"Visual Studio 16 2019" -A Win32' }}
            platform: Windows
            os: windows-latest
            arch: x86
            cmake-build-param: -j $env:NUMBER_OF_PROCESSORS
            folder: win
          - cmake-generator: ${{ '"Visual Studio 16 2019" -A x64' }}
            platform: Windows
            os: windows-latest
            arch: x64
            cmake-build-param: -j $env:NUMBER_OF_PROCESSORS
            folder: win
          - cmake-generator: ${{ '"Unix Makefiles"' }}
            platform: Linux
            os: ubuntu-latest
            arch: x64
            cmake-build-param: -j $(nproc --all)
            folder: linux
          - cmake-generator: Xcode
            platform: macOS
            os: macos-latest
            arch: x64
            cmake-build-param: -j $(sysctl -n hw.ncpu)
            folder: macos
    steps:
      - uses: actions/checkout@v2
      - name: Generate CMake Files
        # NOTES:
        # -Werror=dev is used to validate CMakeLists.txt for any faults.
        run: |
          mkdir build && cd build
          cmake .. -Werror=dev -G ${{ matrix.cmake-generator }}
      - name: Build
        working-directory: build
        run: cmake --build . --config ${{ matrix.configuration }} ${{ matrix.cmake-build-param }}
      - name: Copy Files
        if: matrix.configuration == 'Release'
        working-directory: build
        run: cmake --install . --config ${{ matrix.configuration }} --prefix ../upload/${{ matrix.folder }}_${{ matrix.arch }}
      - name: Upload Build Artifact
        if: matrix.configuration == 'Release'
        uses: actions/upload-artifact@v2
        with:
          name: XbSymbolDatabase
          # roughly translate to upload/<platform_arch>/<bin | lib | include>/<anything in here and after>
          path: upload/*/*/*
          if-no-files-found: error
      - name: Upload Misc Artifact
        if: matrix.cmake-generator == '"Unix Makefiles"' && matrix.configuration == 'Release'
        uses: actions/upload-artifact@v2
        with:
          name: XbSymbolDatabase
          path: |
            README.md
            LICENSE
          if-no-files-found: error
  release:
    if: |
      github.event.action != 'pull_request' &&
      github.ref == 'refs/heads/master' &&
      github.repository == 'Cxbx-Reloaded/XbSymbolDatabase'
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Download artifact
        uses: actions/download-artifact@v1
        with:
          name: XbSymbolDatabase
      - name: Prepare artifact for release
        run: |
          echo "short_commit_sha=$(git rev-parse --short HEAD)" >> $GITHUB_ENV
          7z a -mx1 "XbSymbolDatabase.zip" "./XbSymbolDatabase/*"
      - name: Create release
        id: create_release
        uses: actions/create-release@v1.1.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: CI-${{ env.short_commit_sha }}
          release_name: CI-${{ env.short_commit_sha }}
          prerelease: true
      - name: Upload release asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: XbSymbolDatabase.zip
          asset_name: XbSymbolDatabase.zip
          asset_content_type: application/zip
